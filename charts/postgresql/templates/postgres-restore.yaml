{{- if .Values.postgresql.restore.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    {{- include "postgresql.labels" . | nindent 4 }}
    app.kubernetes.io/component: pg_dumpall
  name: {{ include "postgresql.fullname" . }}-restore
spec:
  progressDeadlineSeconds: 600
  replicas: 0
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: postgres-restore
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: postgres-restore
        {{- with .Values.postgresql.backup.cronjob.labels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.postgresql.image.pullSecrets }}
      imagePullSecrets:
        {{- range . }}
        - name: {{ . }}
        {{- end }}
      {{- end }}
      containers:
      - image: {{ .Values.postgresql.image.registry }}/bitnami/postgresql:{{ .Values.postgresql.image.tag }}
        imagePullPolicy: {{ .Values.postgresql.image.pullPolicy | quote }}
        name: postgresql-restore
        command:
        - /bin/sh
        - -c
        - tail -f /dev/null
        env:
        - name: PGUSER
          value: postgres
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.postgresql.global.postgresql.auth.existingSecret }}
              key: postgres-password
        - name: PGHOST
          value: {{ include "postgresql.fullname" . }}
        - name: PGPORT
          value: "5432"
        - name: PGDUMP_DIR
          value: {{ .Values.postgresql.backup.cronjob.storage.mountPath }}
        resources:
          limits:
            cpu: 150m
            ephemeral-storage: 1Gi
            memory: 192Mi
          requests:
            cpu: 100m
            ephemeral-storage: 50Mi
            memory: 128Mi
        volumeMounts:
          {{- if .Values.postgresql.backup.cronjob.storage.enabled }}
          - name: datadir
            mountPath: {{ .Values.postgresql.backup.cronjob.storage.mountPath }}
            subPath: {{ .Values.postgresql.backup.cronjob.storage.subPath }}
          {{- end }}
          - name: empty-dir
            mountPath: /tmp
            subPath: tmp-dir
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      {{/* restartPolicy: Never */}}
      schedulerName: default-scheduler
      {{- if .Values.postgresql.backup.cronjob.containerSecurityContext.enabled }}
      securityContext: {}
      {{- end }}
      terminationGracePeriodSeconds: 30
      volumes:
        {{- if .Values.postgresql.backup.cronjob.storage.enabled }}
        {{- if .Values.postgresql.backup.cronjob.storage.existingClaim }}
        - name: datadir
          persistentVolumeClaim:
            claimName: {{ printf "%s" (tpl .Values.postgresql.backup.cronjob.storage.existingClaim .) }}
        {{- else }}
        - name: datadir
          persistentVolumeClaim:
            claimName: {{ include "postgresql.fullname" . }}-pgdumpall
        {{- end }}
        {{- end }}
        - name: empty-dir
          emptyDir: {}
{{- end }}
